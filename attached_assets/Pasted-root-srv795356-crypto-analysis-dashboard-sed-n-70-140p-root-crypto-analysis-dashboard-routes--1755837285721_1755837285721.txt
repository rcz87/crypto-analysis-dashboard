root@srv795356:~/crypto-analysis-dashboard# sed -n '70,140p' /root/crypto-analysis-dashboard/routes.py | nl
     1          
     2      return jsonify({
     3          "message": "Advanced Cryptocurrency Trading Analysis Platform",
     4          "service": "crypto-trading-suite",
     5          "version": current_app.config.get("API_VERSION", "2.0.0"),
     6          "status": "active",
     7          "description": "AI-powered cryptocurrency trading signals with institutional-grade analysis",
     8          "features": [
     9              "Smart Money Concept Analysis",
    10              "AI-Powered Trading Signals",
    11              "Real-time Market Data",
    12              "Technical Analysis",
    13              "Risk Management",
    14              "ChatGPT Integration",
    15              "Enhanced Signal Generation",
    16              "Institutional Analysis",
    17              "Performance Monitoring",
    18              "Security Features",
    19              "Data Quality Management"
    20          ],
    21          "endpoints": all_endpoints,
    22          "registered_blueprints": len(current_app.blueprints),
    23          "total_endpoints": len(all_endpoints),
    24          "blueprint_prefixes": blueprint_info,
    25          "documentation": "/api/schema",
    26          "timestamp": datetime.now().isoformat()
    27      })

    28  @core_bp.route("/health", methods=["GET"])
    29  def health_check():
    30      """Enhanced health check with component status determination - NO API key required"""
    31      # Health check should be accessible without API key for monitoring
    32      # gate = _require_api_key()  # Commented out - health check exempt

    33      from datetime import datetime
    34
    35      health_status = "healthy"
    36      components = {}
    37
    38      # Test database connection using SQLAlchemy config only
    39      try:
    40          import sqlalchemy as sa
    41
    42          # Get database URL from Flask config (single source of truth)
    43          database_url = current_app.config.get("SQLALCHEMY_DATABASE_URI")
    44          if not database_url:
    45              raise ValueError("SQLALCHEMY_DATABASE_URI not configured")
    46
    47          # Create engine directly from config to avoid fallbacks
    48          engine = sa.create_engine(database_url, pool_pre_ping=True, connect_args={"connect_timeout": 10})
    49          with engine.connect() as connection:
    50              result = connection.execute(sa.text("SELECT 1"))
    51              row = result.fetchone()
    52              if row and row[0] == 1:
    53                  components["database"] = {"status": "healthy", "message": "SQLAlchemy connection successful"}
    54              else:
    55                  components["database"] = {"status": "degraded", "message": "Unexpected query result"}
    56                  health_status = "degraded"
    57
    58      except Exception as e:
    59          logger.warning(f"Database health check failed: {e}")
    60          error_msg = str(e).lower()
    61          if 'connection' in error_msg or 'timeout' in error_msg or 'refused' in error_msg:
    62              components["database"] = {"status": "unhealthy", "message": f"Connection failed: {str(e)[:100]}"}
    63              health_status = "unhealthy"
    64          else:
    65              components["database"] = {"status": "degraded", "message": f"Database error: {str(e)[:100]}"}
    66              if health_status == "healthy":
    67                  health_status = "degraded"
    68
    69      # Test core components availability
root@srv795356:~/crypto-analysis-dashboard# 