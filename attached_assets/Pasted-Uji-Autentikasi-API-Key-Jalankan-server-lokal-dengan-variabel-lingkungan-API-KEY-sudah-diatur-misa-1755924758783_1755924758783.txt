Uji Autentikasi API Key

Jalankan server lokal dengan variabel lingkungan API_KEY sudah diatur (misal API_KEY=supersecretkey123).

Kirim request tanpa header Authorization ke endpoint yang dilindungi, misalnya menggunakan curl:

curl -X GET http://localhost:5000/api/signals


Respons seharusnya berstatus 401 Unauthorized dengan pesan error.

Kirim request dengan API key yang benar:

curl -H "Authorization: Bearer supersecretkey123" -X GET http://localhost:5000/api/signals


Respons seharusnya berstatus 200 OK dan mengembalikan data JSON.

Kirim request dengan API key yang salah untuk memastikan akses ditolak:

curl -H "Authorization: Bearer wrongkey" -X GET http://localhost:5000/api/signals


Respons harus tetap 401 Unauthorized.

✅ Uji Rate Limiting

Pastikan Anda sudah mengonfigurasi limiter, misalnya 30 per minute untuk endpoint tertentu.

Gunakan script sederhana (Python/bash loop) atau fitur “Runner” di Postman untuk mengirim request berulang dengan API key valid. Contoh Python:

import requests

headers = {"Authorization": "Bearer supersecretkey123"}
for i in range(40):  # misal 40 permintaan
    r = requests.get("http://localhost:5000/api/signals", headers=headers)
    print(i, r.status_code)


Perhatikan bahwa setelah batas yang ditentukan (30 request), server akan merespons 429 Too Many Requests untuk permintaan berikutnya, menandakan rate limiter bekerja.

✅ Uji Otomatis (Opsional)

Gunakan pytest dan library requests atau Flask test client untuk membuat unit test yang memeriksa status kode dan limit.

Contoh pengujian menggunakan FlaskClient:

def test_protected_endpoint(client):
    # tanpa API key
    response = client.get("/api/signals")
    assert response.status_code == 401

    # dengan API key valid
    response = client.get("/api/signals",
                          headers={"Authorization": "Bearer supersecretkey123"})
    assert response.status_code == 200


Dengan cara ini, Anda bisa yakin bahwa sistem proteksi API sudah terpasang dengan benar. Jika salah satu langkah tidak bekerja sesuai harapan, periksa lagi konfigurasi API_KEY, penerapan decorator require_api_key, dan aturan rate limiting pada setiap endpoint.