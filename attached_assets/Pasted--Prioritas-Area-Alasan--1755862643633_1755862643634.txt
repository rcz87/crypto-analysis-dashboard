| Prioritas | Area                                      | Alasan                                                                                                                                                                                                                                                                                                                                                                                           |
| --------- | ----------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| **1**     | **Architecture & Universal Caching**      | Dengan 35+ endpoint dan modul berat seperti AI reasoning & ML ensemble, bottleneck terbesar adalah performa. Caching terpusat (market data, AI preview, ML inference) akan menurunkan latensi, mengurangi beban OKX/DB (ingat rate limit 120 req/min) dan memudahkan scaling ke multi‑exchange. Selain itu, ini meminimalkan duplikasi logika caching yang sekarang terpencar di beberapa modul. |
| **2**     | **Code Optimization & Shared Services**   | Sistem ini sudah modular, tapi ada banyak overlap antar endpoint (analisis SMC, risk management, ML ensemble). Membangun service layer yang reusable akan menyederhanakan maintenance, meminimalisasi bug duplikasi, dan memudahkan menambah fitur baru. Ini cocok dikerjakan paralel dengan perbaikan caching karena keduanya saling melengkapi.                                                |
| **3**     | **Developer Experience**                  | Contoh payload, SDK, dan self‑service docs akan mempercepat adopsi developer dan meminimalisasi support tickets. Ini penting, tapi bisa dijadwalkan setelah fondasi code dan arsitektur stabil.                                                                                                                                                                                                  |
| **4**     | **Scalability via Dynamic Risk Profiles** | Mengizinkan user custom risk profile akan meningkatkan fleksibilitas, tapi baru bermanfaat jika core risk management stabil dan performa sudah terjamin. Ini bisa masuk ke roadmap medium‑term setelah universal caching dan refactoring terselesaikan.                                                                                                                                          |
