#!/usr/bin/env python3
"""
GPTS All-in-One Tester
- Menguji SEMUA endpoint (auto-discovery via OpenAPI) + WAJIB 10 endpoint inti.
- Fallback kalau OpenAPI tidak tersedia.
- Support Bearer auth via argumen CLI.
- Hasil ringkasan ke CSV: all_endpoints_report.csv & core10_report.csv

Usage:
  python gpts_all_in_one_tester.py http://host:port
  python gpts_all_in_one_tester.py http://host:port --auth "Bearer XYZ"
  python gpts_all_in_one_tester.py http://host:port --core10-only
  python gpts_all_in_one_tester.py http://host:port --all-only
"""

import sys, time, json, csv, re, argparse
from typing import Dict, Any, List, Tuple
import requests

SCHEMA_CANDIDATES = [
    "/openapi.json",
    "/api/openapi_schema",
    "/openapi_schema",
    "/docs/openapi.json",
    "/schema/openapi.json",
]

DEFAULTS = {
    "symbol": "SOL-USDT",
    "tf": "1h",
    "tfs": ["1m","5m","15m","1h"],
    "limit": 300,
    "format": "json"
}

# --- CORE 10 yang wajib dites (method sudah disesuaikan)
CORE10 = [
    ("GET" , "/api/gpts/health"),
    ("GET" , "/api/gpts/status"),
    ("GET" , "/api/gpts/ticker/<symbol>"),     # fallback ?symbol=
    ("GET" , "/api/gpts/orderbook/<symbol>"),  # fallback ?symbol=&depth=400
    ("POST", "/api/gpts/market-data"),
    ("POST", "/api/gpts/analysis"),
    ("GET" , "/api/gpts/sinyal/tajam"),        # ?symbol=&tf=1h&format=json
    ("GET" , "/api/gpts/signal"),              # ?symbol=&tf=15m
    ("POST", "/api/gpts/smc-zones"),
    ("POST", "/api/gpts/smc-analysis"),
]

# --- Overrides khusus agar request sukses di service kamu
QUERY_OVERRIDES: Dict[str, Dict[str, Any]] = {
    "/api/gpts/sinyal/tajam": {"symbol": DEFAULTS["symbol"], "tf": DEFAULTS["tf"], "format": DEFAULTS["format"]},
    "/api/gpts/signal": {"symbol": DEFAULTS["symbol"], "tf": "15m"},
    "/api/gpts/indicators": {"symbol": DEFAULTS["symbol"], "tf": DEFAULTS["tf"]},
    "/api/gpts/funding-rate": {"symbol": DEFAULTS["symbol"]},
    "/api/gpts/market-depth": {"symbol": DEFAULTS["symbol"], "limit": 400},
    "/api/gpts/state/signal-history": {"symbol": DEFAULTS["symbol"]},
    "/api/news/latest": {"symbol": DEFAULTS["symbol"], "limit": 3},
    "/api/news/sentiment": {"symbol": DEFAULTS["symbol"]},
    "/api/performance/equity-curve": {"symbol": DEFAULTS["symbol"]},
    "/api/performance/detailed-report": {"symbol": DEFAULTS["symbol"]},
}

PAYLOAD_OVERRIDES: Dict[str, Dict[str, Any]] = {
    "/api/gpts/market-data": {"symbol": DEFAULTS["symbol"], "tf": DEFAULTS["tf"], "limit": DEFAULTS["limit"]},
    "/api/gpts/analysis": {"symbol": DEFAULTS["symbol"], "tf": "4h"},
    "/api/gpts/smc-zones": {"symbol": DEFAULTS["symbol"], "tfs": ["5m","15m","1h"]},
    "/api/gpts/smc-analysis": {"symbol": DEFAULTS["symbol"], "tfs": DEFAULTS["tfs"],
                               "features": ["BOS","CHOCH","OB","FVG","LIQ_SWEEP"]},
    "/api/performance/backtest": {"symbol": DEFAULTS["symbol"], "tf": "1h", "lookback": 300},
}

FALLBACK_ALL: Dict[str, List[str]] = {
    # minimal set + yang kita temukan dari schema kamu sebelumnya
    "/api/gpts/health": ["get"],
    "/api/gpts/status": ["get"],
    "/api/gpts/ticker": ["get"],
    "/api/gpts/orderbook": ["get"],
    "/api/gpts/market-data": ["post"],
    "/api/gpts/analysis": ["post"],
    "/api/gpts/sinyal/tajam": ["get"],
    "/api/gpts/signal": ["get"],
    "/api/gpts/smc-zones": ["post"],
    "/api/gpts/smc-analysis": ["post"],
    "/api/gpts/indicators": ["get"],
    "/api/gpts/funding-rate": ["get"],
    "/api/gpts/market-depth": ["get"],
    "/api/gpts/state/signal-history": ["get"],
    "/api/news/latest": ["get"],
    "/api/news/sentiment": ["get"],
    "/api/performance/": ["get"],
    "/api/performance/stats": ["get"],
    "/api/performance/summary": ["get"],
    "/api/performance/equity-curve": ["get"],
    "/api/performance/detailed-report": ["get"],
    "/api/promptbook/": ["get"],
    "/api/promptbook/init": ["get"],
    "/api/promptbook/status": ["get"],
    "/api/smc/context": ["get"],
    "/api/smc/status": ["get"],
    "/api/smc/summary": ["get"],
    "/": ["get"],
}

def cut(obj: Any, n=300) -> str:
    try:
        s = json.dumps(obj, ensure_ascii=False)
    except Exception:
        s = str(obj)
    return s[:n] + ("..." if len(s) > n else "")

def fill_path_params(raw_path: str) -> str:
    # ganti <symbol> / {symbol}
    def repl_angle(m):
        key = m.group(1).lower()
        return DEFAULTS["symbol"] if "symbol" in key else key
    def repl_curly(m):
        key = m.group(1).lower()
        return DEFAULTS["symbol"] if "symbol" in key else key
    p = re.sub(r"<([^>]+)>", repl_angle, raw_path)
    p = re.sub(r"{([^}]+)}", repl_curly, p)
    return p

def build_query(raw_path: str, path_after_fill: str) -> str:
    # explicit overrides based on RAW path key (tanpa <symbol> diganti)
    q = QUERY_OVERRIDES.get(raw_path, {})
    if not q:
        # heuristik untuk ticker/orderbook PATH-PARAM fallback
        if raw_path.endswith("/ticker/<symbol>"):
            return ""  # path-param, tidak perlu query
        if raw_path.endswith("/orderbook/<symbol>"):
            return ""  # path-param, tidak perlu query
        # kalau path non-param umum:
        if path_after_fill.endswith("/ticker"):
            q = {"symbol": DEFAULTS["symbol"]}
        elif path_after_fill.endswith("/orderbook"):
            q = {"symbol": DEFAULTS["symbol"], "depth": 400}
    if q:
        return "?" + "&".join([f"{k}={v}" for k, v in q.items()])
    return ""

def ok(code: int) -> bool:
    return 200 <= code < 300

def req_get(sess: requests.Session, url: str, headers: Dict[str, str]):
    t0 = time.time()
    r = sess.get(url, headers=headers, timeout=25)
    ms = (time.time() - t0) * 1000
    try: data = r.json()
    except: data = r.text
    return ok(r.status_code), r.status_code, data, ms

def req_post(sess: requests.Session, url: str, payload: Dict[str, Any], headers: Dict[str, str]):
    t0 = time.time()
    r = sess.post(url, json=payload, headers=headers, timeout=35)
    ms = (time.time() - t0) * 1000
    try: data = r.json()
    except: data = r.text
    return ok(r.status_code), r.status_code, data, ms

def discover_openapi_paths(base: str, sess: requests.Session, headers: Dict[str, str]):
    for cand in SCHEMA_CANDIDATES:
        try:
            r = sess.get(base + cand, headers=headers, timeout=15)
            if ok(r.status_code):
                data = r.json()
                if isinstance(data, dict) and isinstance(data.get("paths"), dict):
                    paths = {}
                    for p, node in data["paths"].items():
                        meths = [m.lower() for m in node.keys() if m.lower() in ("get","post")]
                        if meths:
                            paths[p] = meths
                    return paths, cand
        except Exception:
            pass
    return {}, ""

def test_core10(base: str, sess: requests.Session, headers: Dict[str, str]) -> List[Tuple]:
    print("\n=== CORE-10 TEST ===")
    rows = []  # (method, raw_path, url, status, ok, ms, sample)
    idx = 0
    for m, raw_path in CORE10:
        idx += 1
        path = fill_path_params(raw_path)
        # fallback untuk ticker/orderbook jika mode path-param gagal
        if m == "GET" and raw_path.endswith("/ticker/<symbol>"):
            url = base + path
            ok1, code1, data1, ms1 = req_get(sess, url, headers)
            if not ok1:
                # fallback query
                url = f"{base}/api/gpts/ticker?symbol={DEFAULTS['symbol']}"
                ok1, code1, data1, ms1 = req_get(sess, url, headers)
        elif m == "GET" and raw_path.endswith("/orderbook/<symbol>"):
            url = base + path
            ok1, code1, data1, ms1 = req_get(sess, url, headers)
            if not ok1:
                url = f"{base}/api/gpts/orderbook?symbol={DEFAULTS['symbol']}&depth=400"
                ok1, code1, data1, ms1 = req_get(sess, url, headers)
        else:
            q = build_query(raw_path, path)
            url = base + path + q
            if m == "GET":
                ok1, code1, data1, ms1 = req_get(sess, url, headers)
            else:  # POST
                payload = PAYLOAD_OVERRIDES.get(raw_path, {})
                ok1, code1, data1, ms1 = req_post(sess, url, payload, headers)

        print(f"[{idx:02d}/10] {m:4} {raw_path:<32} {'✅' if ok1 else '❌'} {ms1:7.1f} ms ({code1})")
        rows.append((m, raw_path, url, code1, ok1, ms1, cut(data1)))
    return rows

def test_all(base: str, sess: requests.Session, headers: Dict[str, str]) -> List[Tuple]:
    print("\n=== ALL ENDPOINTS TEST (OpenAPI) ===")
    routes, where = discover_openapi_paths(base, sess, headers)
    if routes:
        print(f"OpenAPI found at {where} → {len(routes)} paths to test.")
    else:
        print("OpenAPI not found → using fallback route list.")
        routes = FALLBACK_ALL

    rows = []
    total = 0
    for raw_path, methods in routes.items():
        path = fill_path_params(raw_path)
        for m in methods:
            total += 1
            try:
                if m == "get":
                    q = build_query(raw_path, path)
                    url = base + path + q
                    ok1, code1, data1, ms1 = req_get(sess, url, headers)
                else:
                    url = base + path
                    payload = PAYLOAD_OVERRIDES.get(raw_path, {})
                    ok1, code1, data1, ms1 = req_post(sess, url, payload, headers)
                print(f"{m.upper():4} {raw_path:<40} {'✅' if ok1 else '❌'} {ms1:7.1f} ms ({code1})")
                rows.append((m.upper(), raw_path, url, code1, ok1, ms1, cut(data1)))
            except Exception as e:
                rows.append((m.upper(), raw_path, base+path, -1, False, 0.0, f"EXC: {e}"))
                print(f"{m.upper():4} {raw_path:<40} ❌ EXC {e}")
    return rows

def write_csv(path: str, rows: List[Tuple]):
    with open(path, "w", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        w.writerow(["method","path","url","status_code","ok","latency_ms","sample"])
        for r in rows:
            # r: (method, raw_path, url, code, ok, ms, sample)
            w.writerow([r[0], r[1], r[2], r[3], r[4], f"{r[5]:.1f}", r[6]])

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("base_url", help="Base URL, contoh: http://gpts.guardiansofthetoken.id")
    ap.add_argument("--auth", help='Authorization header, contoh: Bearer XXX', default=None)
    ap.add_argument("--core10-only", action="store_true", help="Hanya tes 10 endpoint inti")
    ap.add_argument("--all-only", action="store_true", help="Hanya tes semua endpoint (OpenAPI)")
    args = ap.parse_args()

    base = args.base_url.rstrip("/")
    headers = {}
    if args.auth:
        headers["Authorization"] = args.auth

    sess = requests.Session()

    if not args.all_only:
        core_rows = test_core10(base, sess, headers)
        write_csv("core10_report.csv", core_rows)
        print(f"→ core10_report.csv saved. Passed: {sum(1 for r in core_rows if r[4])}/{len(core_rows)}")

    if not args.core10_only:
        all_rows = test_all(base, sess, headers)
        write_csv("all_endpoints_report.csv", all_rows)
        print(f"→ all_endpoints_report.csv saved. Passed: {sum(1 for r in all_rows if r[4])}/{len(all_rows)}")

    print("\nSelesai.")

if __name__ == "__main__":
    main()