#!/bin/bash

# EMERGENCY VPS DATABASE FIX - Berdasarkan Screenshot Error
# Script ini khusus untuk memperbaiki masalah database connection yang Anda alami

echo "üö® EMERGENCY VPS DATABASE FIX"
echo "============================="

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() { echo -e "${GREEN}[INFO]${NC} $1"; }
print_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
print_error() { echo -e "${RED}[ERROR]${NC} $1"; }
print_step() { echo -e "${BLUE}[STEP]${NC} $1"; }

# 1. Stop semua services dulu
print_step "1. Stopping all services..."
sudo systemctl stop cryptoapi.service 2>/dev/null || echo "Service already stopped"
sudo systemctl stop nginx 2>/dev/null || echo "Nginx already stopped"

# 2. Identifikasi masalah dari screenshot
print_step "2. Analyzing the database connection issue..."
echo "Dari screenshot, terlihat error:"
echo "- sqlalchemy.exc.OperationalError"
echo "- connection to server at 'localhost:5432' failed"
echo "- No such file or directory"
echo ""
echo "DIAGNOSIS: Aplikasi masih mencoba konek ke PostgreSQL lokal, bukan Neon!"

# 3. Find dan backup environment files
print_step "3. Finding environment configuration..."

# Check berbagai lokasi environment file
ENV_LOCATIONS=(
    "/home/$(whoami)/crypto-analysis-dashboard/.env"
    "/home/$(whoami)/crypto-analysis-dashboard/.env.production"
    "/root/crypto-analysis-dashboard/.env"
    "/root/crypto-analysis-dashboard/.env.production"
    "/opt/crypto-analysis-dashboard/.env"
    "/var/www/crypto-analysis-dashboard/.env"
)

FOUND_ENV=""
for location in "${ENV_LOCATIONS[@]}"; do
    if [ -f "$location" ]; then
        FOUND_ENV="$location"
        print_status "Found environment file: $location"
        break
    fi
done

# Check systemd service file untuk EnvironmentFile
SERVICE_FILES=(
    "/etc/systemd/system/cryptoapi.service"
    "/lib/systemd/system/cryptoapi.service"
)

SYSTEMD_ENV=""
for service_file in "${SERVICE_FILES[@]}"; do
    if [ -f "$service_file" ]; then
        ENV_FROM_SERVICE=$(grep EnvironmentFile "$service_file" | cut -d'=' -f2 | tr -d ' ')
        if [ -n "$ENV_FROM_SERVICE" ] && [ -f "$ENV_FROM_SERVICE" ]; then
            SYSTEMD_ENV="$ENV_FROM_SERVICE"
            print_status "Found systemd environment file: $SYSTEMD_ENV"
            break
        fi
    fi
done

# 4. Create the correct environment configuration
print_step "4. Creating correct environment configuration..."

# Prompt untuk Neon database URL
echo ""
print_warning "KITA PERLU DATABASE URL NEON YANG BENAR!"
echo "Dari output sebelumnya, Anda punya:"
echo "SQLALCHEMY_DATABASE_URI=postgresql://neondb_owner:YOUR_NEON_PASS@ep-billowing-sunset-xxxx.us-east-2.aws.neon.tech/neondb?sslmode=require"
echo ""
read -p "Masukkan URL database Neon lengkap (copy dari SQLALCHEMY_DATABASE_URI yang benar): " NEON_URL

if [ -z "$NEON_URL" ]; then
    print_error "Database URL tidak boleh kosong!"
    exit 1
fi

# Validate URL
if [[ ! "$NEON_URL" =~ postgresql:// ]]; then
    print_error "URL harus dimulai dengan postgresql://"
    exit 1
fi

# 5. Create new environment file dengan konfigurasi yang benar
NEW_ENV_FILE="/home/$(whoami)/crypto-analysis-dashboard/.env.production"
print_step "5. Creating new environment file: $NEW_ENV_FILE"

# Backup existing files
if [ -n "$FOUND_ENV" ]; then
    cp "$FOUND_ENV" "${FOUND_ENV}.backup.$(date +%Y%m%d_%H%M%S)"
    print_status "Backed up existing env file"
fi

if [ -n "$SYSTEMD_ENV" ]; then
    cp "$SYSTEMD_ENV" "${SYSTEMD_ENV}.backup.$(date +%Y%m%d_%H%M%S)"
    print_status "Backed up systemd env file"
fi

# Create directory if not exists
mkdir -p "$(dirname "$NEW_ENV_FILE")"

# Create comprehensive environment file
cat > "$NEW_ENV_FILE" << EOF
# Production Environment - VPS Database Fix
# Generated by emergency fix script $(date)

# CRITICAL: Database Configuration - BOTH must point to Neon!
DATABASE_URL=$NEON_URL
SQLALCHEMY_DATABASE_URI=$NEON_URL

# Application Settings
FLASK_ENV=production
API_KEY_REQUIRED=true
DEBUG=False

# Security (you'll need to add your actual keys)
API_KEY=your-actual-api-key-here
SESSION_SECRET=your-super-secret-session-key-change-this

# AI Services (add your actual keys)
OPENAI_API_KEY=sk-proj-your-openai-key-here

# Trading API (add your actual keys)
OKX_API_KEY=your-okx-api-key
OKX_SECRET_KEY=your-okx-secret-key
OKX_PASSPHRASE=your-okx-passphrase

# Optional
TELEGRAM_BOT_TOKEN=your-telegram-token
TELEGRAM_CHAT_ID=your-chat-id
EOF

print_status "Environment file created with correct database configuration"

# 6. Update systemd service untuk menggunakan file yang benar
print_step "6. Updating systemd service configuration..."

SERVICE_FILE="/etc/systemd/system/cryptoapi.service"

# Create or update systemd service
sudo tee "$SERVICE_FILE" > /dev/null << EOF
[Unit]
Description=Cryptocurrency Trading API
After=network.target

[Service]
Type=notify
User=$(whoami)
Group=$(whoami)
WorkingDirectory=/home/$(whoami)/crypto-analysis-dashboard
Environment=PATH=/home/$(whoami)/crypto-analysis-dashboard/venv/bin
EnvironmentFile=$NEW_ENV_FILE
ExecStart=/home/$(whoami)/crypto-analysis-dashboard/venv/bin/gunicorn --bind 0.0.0.0:5000 --workers 4 --worker-class gthread --threads 4 --timeout 60 main:app
ExecReload=/bin/kill -s HUP \$MAINPID
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
EOF

print_status "Systemd service updated"

# 7. Test database connection sebelum start service
print_step "7. Testing database connection..."

cd "/home/$(whoami)/crypto-analysis-dashboard" || exit 1

# Activate virtual environment dan test connection
if [ -f "venv/bin/activate" ]; then
    source venv/bin/activate
else
    print_error "Virtual environment not found. Creating new one..."
    python3 -m venv venv
    source venv/bin/activate
    
    # Install minimal requirements
    pip install flask sqlalchemy psycopg2-binary gunicorn
fi

# Set environment variable untuk test
export DATABASE_URL="$NEON_URL"
export SQLALCHEMY_DATABASE_URI="$NEON_URL"

# Create simple test script
cat > test_db_connection.py << 'EOF'
import os
import sys
from sqlalchemy import create_engine, text

try:
    db_url = os.environ.get('DATABASE_URL')
    if not db_url:
        print("ERROR: DATABASE_URL not set")
        sys.exit(1)
    
    print(f"Testing connection to: {db_url[:50]}...")
    
    engine = create_engine(db_url)
    with engine.connect() as conn:
        result = conn.execute(text('SELECT 1'))
        row = result.fetchone()
        if row and row[0] == 1:
            print("‚úÖ Database connection successful!")
            sys.exit(0)
        else:
            print("‚ùå Database query failed")
            sys.exit(1)
            
except Exception as e:
    print(f"‚ùå Database connection failed: {e}")
    sys.exit(1)
EOF

python test_db_connection.py
DB_TEST_RESULT=$?

if [ $DB_TEST_RESULT -eq 0 ]; then
    print_status "‚úÖ Database connection test passed!"
else
    print_error "‚ùå Database connection test failed!"
    print_warning "Please check your Neon database URL and credentials"
    exit 1
fi

# 8. Start services
print_step "8. Starting services..."

sudo systemctl daemon-reload
sudo systemctl enable cryptoapi.service
sudo systemctl start cryptoapi.service

# Wait for service to start
sleep 5

# 9. Verify fix
print_step "9. Verifying the fix..."

if systemctl is-active --quiet cryptoapi.service; then
    print_status "‚úÖ Service is running"
    
    # Test health endpoint
    print_status "Testing health endpoint..."
    for i in {1..10}; do
        HEALTH=$(curl -s http://localhost:5000/health 2>/dev/null || echo "ERROR")
        if [[ "$HEALTH" =~ "healthy" ]]; then
            print_status "‚úÖ Health check passed!"
            echo "$HEALTH" | grep -o '"database":[^}]*}'
            break
        else
            if [ $i -eq 10 ]; then
                print_error "‚ùå Health check failed after 10 attempts"
                print_status "Checking logs..."
                sudo journalctl -u cryptoapi.service -n 20 --no-pager
            else
                echo "Waiting for service to be ready... ($i/10)"
                sleep 2
            fi
        fi
    done
    
else
    print_error "‚ùå Service failed to start"
    print_status "Checking service logs..."
    sudo journalctl -u cryptoapi.service -n 30 --no-pager
    exit 1
fi

# 10. Final verification
print_step "10. Final verification..."

# Check environment variables in running process
PID=$(systemctl show -p MainPID --value cryptoapi.service)
if [ "$PID" != "0" ] && [ -n "$PID" ]; then
    echo ""
    echo "Environment variables in running process:"
    tr '\0' '\n' </proc/$PID/environ | grep -E 'DATABASE_URL|SQLALCHEMY_DATABASE_URI|FLASK_ENV'
fi

# Test API endpoints
echo ""
print_status "Testing API endpoints..."

# Root endpoint
ROOT_TEST=$(curl -s http://localhost:5000/ 2>/dev/null || echo "ERROR")
if [[ "$ROOT_TEST" =~ "crypto-trading-suite" ]]; then
    print_status "‚úÖ Root endpoint working"
else
    print_warning "‚ö†Ô∏è Root endpoint may have issues"
fi

echo ""
echo "üéâ VPS DATABASE FIX COMPLETE!"
echo "============================="
echo ""
print_status "Summary of what was fixed:"
echo "‚Ä¢ Created new environment file with correct Neon database URL"
echo "‚Ä¢ Updated systemd service configuration"
echo "‚Ä¢ Fixed DATABASE_URL to point to Neon instead of localhost"
echo "‚Ä¢ Verified database connection"
echo "‚Ä¢ Started services successfully"
echo ""
print_warning "IMPORTANT: Update your API keys in the environment file:"
echo "nano $NEW_ENV_FILE"
echo ""
print_status "Your VPS should now be working with Neon database!"

# Clean up test file
rm -f test_db_connection.py

echo ""
echo "Service management commands:"
echo "‚Ä¢ Check status: sudo systemctl status cryptoapi.service"
echo "‚Ä¢ View logs: sudo journalctl -u cryptoapi.service -f"
echo "‚Ä¢ Restart: sudo systemctl restart cryptoapi.service"